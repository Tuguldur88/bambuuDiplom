{"version":3,"sources":["components/excelPage.js","App.js","serviceWorker.js","index.js"],"names":["ExcelPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSave","row","newData","toConsumableArray","state","rows","index","findIndex","item","key","splice","objectSpread","setState","fileHandler","fileList","console","log","fileObj","type","errorMessage","ExcelRenderer","err","resp","newRows","slice","map","push","number","level","gender","question1","question2","question3","question4","yriltslga","buleg","length","cols","handleSubmit","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","stop","handleDelete","filter","handleAdd","_this$state","count","concat","columns","title","dataIndex","editable","render","text","record","react_default","createElement","popconfirm","onConfirm","file","size","_this2","col","onCell","Fragment","es_row","gutter","es_col","span","style","display","justifyContent","alignItems","marginBottom","className","href","target","rel","download","align","es_button","onClick","marginLeft","upload","name","beforeUpload","onRemove","multiple","marginTop","table","rowClassName","dataSource","Component","App","excelPage_ExcelPage","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70575aa7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Table, Button, Popconfirm, Row, Col, Upload } from \"antd\";\nimport { ExcelRenderer } from \"react-excel-renderer\";\n\nexport default class ExcelPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: [],\n      rows: [],\n      errorMessage: null,\n      columns: [\n        {\n          title: \"Д/д\",\n          dataIndex: \"number\",\n          editable: true\n        },\n        {\n          title: \"Түвшин\",\n          dataIndex: \"level\",\n          editable: true\n        },\n        {\n          title: \"Хүйс\",\n          dataIndex: \"gender\",\n          editable: true\n        },\n        {\n          title: \"Онолын болон практик хичээлийн алийг нь судлахад тухайн сэдвээр ойлголт авахад илүү хялбар байдаг вэ?\",\n          dataIndex: \"question1\",\n          editable: true\n        },\n        {\n          title: \"Сурах үйл ажиллагаанд илүү их хүчин чармайлт гаргахад юу нөлөөлдөг вэ?\",\n          dataIndex: \"question2\",\n          editable: true\n        },\n        {\n          title: \"Хичээлийн үеэр ямар нөхцөлд буюу ямар үед хамгийн идэвхтэй суралцдаг вэ?\",\n          dataIndex: \"question3\",\n          editable: true\n        },\n        {\n          title: \"Долоо хоногт дунджаар хичээл хийхэд хэдэн цагийг зарцуулж байна? Үүнийг ихэсгэх / багасгах бодол байгаа юу?\",\n          dataIndex: \"question4\",\n          editable: true\n        },\n        {\n          title: \"Ярильцлага\",\n          dataIndex: \"yriltslga\",\n          editable: true\n        },\n        {\n          title: \"Бүлэг\",\n          dataIndex: \"buleg\",\n          editable: true\n        },\n        {\n          title: \"Устгах\",\n          dataIndex: \"action\",\n          render: (text, record) =>\n            this.state.rows.length >= 1 ? (\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => this.handleDelete(record.key)}\n              >\n                <p>Устгах</p>\n              </Popconfirm>\n            ) : null\n        }\n      ]\n    };\n  }\n\n  handleSave = row => {\n    const newData = [...this.state.rows];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row\n    });\n    this.setState({ rows: newData });\n  };\n\n  checkFile(file) {\n    let errorMessage = \"\";\n    if (!file || !file[0]) {\n      return;\n    }\n    const isExcel =\n      file[0].type === \"application/vnd.ms-excel\" ||\n      file[0].type ===\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n    if (!isExcel) {\n      errorMessage = \"You can only upload Excel file!\";\n    }\n    console.log(\"file\", file[0].type);\n    const isLt2M = file[0].size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      errorMessage = \"File must be smaller than 2MB!\";\n    }\n    console.log(\"errorMessage\", errorMessage);\n    return errorMessage;\n  }\n\n  fileHandler = fileList => {\n    console.log(\"fileList\", fileList);\n    let fileObj = fileList;\n    if (!fileObj) {\n      this.setState({\n        errorMessage: \"No file uploaded!\"\n      });\n      return false;\n    }\n    console.log(\"fileObj.type:\", fileObj.type);\n    if (\n      !(\n        fileObj.type === \"application/vnd.ms-excel\" ||\n        fileObj.type ===\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n      )\n    ) {\n      this.setState({\n        errorMessage: \"Unknown file format. Only Excel files are uploaded!\"\n      });\n      return false;\n    }\n    //just pass the fileObj as parameter\n    ExcelRenderer(fileObj, (err, resp) => {\n      if (err) {\n        console.log(err);\n      } else {\n        let newRows = [];\n        resp.rows.slice(1).map((row, index) => {\n          if (row && row !== \"undefined\") {\n            newRows.push({\n              key: index,\n              number: row[0],\n              level: row[1],\n              gender: row[2],\n              question1: row[3],\n              question2: row[4],\n              question3: row[5],\n              question4: row[6],\n              yriltslga: row[7],\n              buleg: row[8],\n\n            });\n          }\n        });\n        if (newRows.length === 0) {\n          this.setState({\n            errorMessage: \"No data found in file!\"\n          });\n          return false;\n        } else {\n          this.setState({\n            cols: resp.cols,\n            rows: newRows,\n            errorMessage: null\n          });\n        }\n      }\n    });\n    return false;\n  };\n\n  handleSubmit = async () => {\n    console.log(\"submitting: \", this.state.rows);\n    //submit to API\n    //if successful, banigate and clear the data\n    //this.setState({ rows: [] })\n  };\n\n  handleDelete = key => {\n    const rows = [...this.state.rows];\n    this.setState({ rows: rows.filter(item => item.key !== key) });\n  };\n  handleAdd = () => {\n    const { count, rows } = this.state;\n    const newData = {\n      number: \"bambu\",\n      level: \"User's name\",\n      gender: \"22\",\n      question1: \"Female\",\n      question2: \"Female\",\n      question3: \"Female\",\n      question4: \"Female\",\n      yriltslga: \"Female\",\n      buleg: \"Female\",\n    };\n    this.setState({\n      rows: [newData, ...rows],\n      count: count + 1\n    });\n  };\n\n  render() {\n    const columns = this.state.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return (\n      <>\n        <h1>my diplom </h1>\n        <Row gutter={16}>\n          <Col\n            span={8}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              marginBottom: \"5%\"\n            }}\n          >\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <div className=\"page-title\">Upload Farmer Data</div>\n            </div>\n          </Col>\n          <Col span={8}>\n            <a\n              href=\"https://res.cloudinary.com/bryta/raw/upload/v1562751445/Sample_Excel_Sheet_muxx6s.xlsx\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              download\n            >\n              Sample excel sheet\n            </a>\n          </Col>\n          <Col\n            span={8}\n            align=\"right\"\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          >\n            {this.state.rows.length > 0 && (\n              <>\n                <Button\n                  onClick={this.handleAdd}\n                  size=\"large\"\n                  type=\"info\"\n                  style={{ marginBottom: 16 }}\n                >\n                  \n                  Add a row\n                </Button>{\" \"}\n                <Button\n                  onClick={this.handleSubmit}\n                  size=\"large\"\n                  type=\"primary\"\n                  style={{ marginBottom: 16, marginLeft: 10 }}\n                >\n                  Submit Data\n                </Button>\n              </>\n            )}\n          </Col>\n        </Row>\n        <div>\n          <Upload\n            name=\"file\"\n            beforeUpload={this.fileHandler}\n            onRemove={() => this.setState({ rows: [] })}\n            multiple={false}\n          >\n            <Button>\n               Та файлаа оруулна уу\n            </Button>\n          </Upload>\n        </div>\n        <div style={{ marginTop: 20 }}>\n          <Table\n            rowClassName={() => \"editable-row\"}\n            dataSource={this.state.rows}\n            columns={columns}\n          />\n        </div>\n      </>\n    );\n  }\n}","import React, { Component } from 'react';\n\nimport \"antd/dist/antd.css\";\nimport ExcelPage from \"./components/excelPage\";\nclass App extends Component {\n\n  \n\n  render() {\n    \n    return (\n       <div>\n      \t<ExcelPage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}