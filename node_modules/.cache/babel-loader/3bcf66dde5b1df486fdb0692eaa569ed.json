{"ast":null,"code":"var _jsxFileName = \"/home/tuguldur/MyDream/Diplom/notepad/src/App.js\";\n\nclass Model {\n  constructor() {\n    this.notes = [];\n  }\n\n}\n\nvar model = new Model();\n\nclass View extends React.Component {\n  constructor() {\n    super(); // Set initial state\n\n    this.state = {\n      inputText: '',\n      color: 'green',\n      alert: ''\n    };\n  }\n\n  render() {\n    // Create list of notes\n    let list = model.notes.map(function (note) {\n      if (note.id != null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: note.bgColor + ' note-box alert col-md-11',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, note.content), React.createElement(\"div\", {\n          className: \"col-md-1 text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"delete btn btn-default\",\n          onClick: this.handleDeleteNote.bind(this, note.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, \"\\xD7\")));\n      }\n    }, this); // Render app content\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panel panel-default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panel-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: \"note-add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Add New Note\"), React.createElement(\"input\", {\n      id: \"note-add\",\n      className: \"form-control\",\n      type: \"text\",\n      value: this.state.inputText,\n      placeholder: \"Type note here\",\n      onChange: this.handleInputText.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: \"select-color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Select Color\"), React.createElement(\"div\", {\n      id: \"select-color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"color-radio\",\n      type: \"radio\",\n      onClick: this.selectGreen.bind(this),\n      checked: this.state.color == 'green' ? 'checked' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), \" Green \\xA0\", React.createElement(\"input\", {\n      className: \"color-radio\",\n      type: \"radio\",\n      onClick: this.selectRed.bind(this),\n      checked: this.state.color == 'red' ? 'checked' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), \" Red \\xA0\", React.createElement(\"input\", {\n      className: \"color-radio\",\n      type: \"radio\",\n      onClick: this.selectBlue.bind(this),\n      checked: this.state.color == 'blue' ? 'checked' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), \" Blue \\xA0\", React.createElement(\"input\", {\n      className: \"color-radio\",\n      type: \"radio\",\n      onClick: this.selectOrange.bind(this),\n      checked: this.state.color == 'orange' ? 'checked' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), \" Orange \\xA0\")), React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.handleAddNote.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Add Note\"), React.createElement(\"span\", {\n      className: \"alerts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.state.alert))), React.createElement(\"h3\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Notes\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, model.notes.length === 0 ? React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"No Notes\") : list));\n  } // Update state of input text\n\n\n  handleInputText(e) {\n    this.setState({\n      inputText: e.target.value\n    });\n  } // Add new note\n\n\n  handleAddNote() {\n    // Add note if input is not blank\n    if (this.state.inputText != '') {\n      controller.addNote({\n        content: this.state.inputText,\n        bgColor: this.state.color\n      });\n    } // Update component state\n\n\n    this.setState({\n      inputText: ''\n    }); // Show note successfully added alert\n\n    if (this.state.inputText != '') {\n      // Show success alert message\n      this.showAddAlert();\n    }\n  } // Delete a note\n\n\n  handleDeleteNote(id) {\n    controller.deleteNote(id);\n    this.showDeleteAlert();\n  }\n\n  showAddAlert() {\n    this.setState({\n      alert: 'Note Added!'\n    });\n    let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\n  }\n\n  showDeleteAlert() {\n    this.setState({\n      alert: 'Note Deleted!'\n    });\n    let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\n  }\n\n  hideAlert() {\n    this.setState({\n      alert: ''\n    });\n  } // Set new note background color to green - default\n\n\n  selectGreen() {\n    this.setState({\n      color: 'green'\n    });\n  } // Set new note background color to red\n\n\n  selectRed() {\n    this.setState({\n      color: 'red'\n    });\n  } // Set new note background color to blue\n\n\n  selectBlue() {\n    this.setState({\n      color: 'blue'\n    });\n  } // Set new note background color to orange\n\n\n  selectOrange() {\n    this.setState({\n      color: 'orange'\n    });\n  }\n\n}\n\nReactDOM.render(React.createElement(View, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 148\n  },\n  __self: this\n}), document.querySelector('#app'));\n\nclass Controller {\n  addNote(newNote) {\n    newNote.id = model.notes.length + 1;\n    model.notes.push(newNote);\n  }\n\n  deleteNote(id) {\n    let new_notes = [];\n\n    for (let i = 0; i < model.notes.length; i++) {\n      if (model.notes[i]['id'] == id) {// do nothing\n      } else {\n        new_notes.push(model.notes[i]);\n      }\n    }\n\n    model.notes = new_notes;\n  }\n\n}\n\nvar controller = new Controller();","map":{"version":3,"sources":["/home/tuguldur/MyDream/Diplom/notepad/src/App.js"],"names":["Model","constructor","notes","model","View","React","Component","state","inputText","color","alert","render","list","map","note","id","bgColor","content","handleDeleteNote","bind","handleInputText","selectGreen","selectRed","selectBlue","selectOrange","handleAddNote","length","e","setState","target","value","controller","addNote","showAddAlert","deleteNote","showDeleteAlert","hideAlert","setTimeout","ReactDOM","document","querySelector","Controller","newNote","push","new_notes","i"],"mappings":"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","sourcesContent":["class Model {\n  constructor() {\n      this.notes = []    \n  }\n  \n}\n\nvar model = new Model();\n\nclass View extends React.Component {\n\nconstructor() {\n  super();\n  // Set initial state\n  this.state = {\n    inputText: '',\n    color: 'green',\n    alert: ''\n  };\n\n}\n\nrender() {\n  // Create list of notes\n  let list = model.notes.map(function(note) {\n    if(note.id != null) {\n      return (<div>\n        <div className={note.bgColor + ' note-box alert col-md-11'}>\n          {note.content}  \n        </div>\n        <div className=\"col-md-1 text-center\">\n          <button className=\"delete btn btn-default\" onClick={this.handleDeleteNote.bind(this, note.id)} >&times;</button>\n        </div>\n    </div>)\n    }\n  }, this);\n  \n  // Render app content\n  return <div>\n    <div className=\"panel panel-default\">\n    <div className=\"panel-body\">\n    <form className=\"form-group\">\n      <label for=\"note-add\">Add New Note</label>\n      <input \n        id=\"note-add\" \n        className=\"form-control\" \n        type=\"text\"\n        value={this.state.inputText}\n        placeholder=\"Type note here\"\n        onChange={this.handleInputText.bind(this)}\n        />\n      <label for=\"select-color\" >Select Color</label>\n      <div id=\"select-color\">\n        <input className=\"color-radio\" type=\"radio\" onClick={this.selectGreen.bind(this)} checked={this.state.color == 'green' ? 'checked' : '' } /> Green &nbsp;\n        <input className=\"color-radio\" type=\"radio\" onClick={this.selectRed.bind(this)} checked={this.state.color == 'red' ? 'checked' : '' } /> Red &nbsp;\n        <input className=\"color-radio\" type=\"radio\" onClick={this.selectBlue.bind(this)} checked={this.state.color == 'blue' ? 'checked' : '' } /> Blue &nbsp;\n        <input className=\"color-radio\" type=\"radio\" onClick={this.selectOrange.bind(this)} checked={this.state.color == 'orange' ? 'checked' : '' } /> Orange &nbsp;\n      </div>\n    </form>\n      <button className=\"btn btn-success\" onClick={this.handleAddNote.bind(this)} >Add Note</button>\n      <span className=\"alerts\">{this.state.alert}</span>\n  </div>\n      </div>\n  <h3 className=\"text-center\">Notes</h3>\n    <hr />\n    <div>\n      {model.notes.length === 0 ? <h3>No Notes</h3> : list}\n    </div>\n  </div>\n}\n\n// Update state of input text\nhandleInputText(e) {\n  this.setState({inputText: e.target.value})\n}\n\n// Add new note\nhandleAddNote() {\n\n   // Add note if input is not blank\n   if(this.state.inputText != '') {\n    controller.addNote({\n      content: this.state.inputText,\n      bgColor: this.state.color\n    });\n   }\n  \n   // Update component state\n   this.setState({\n     inputText: ''\n   });\n  \n   // Show note successfully added alert\n   if(this.state.inputText != '') {\n     // Show success alert message\n     this.showAddAlert();\n   }  \n  \n}\n\n// Delete a note\nhandleDeleteNote(id) {\n    \n  controller.deleteNote(id);\n    \n  this.showDeleteAlert();\n  \n}\n\nshowAddAlert() {\n  this.setState({alert: 'Note Added!'})\n  \n  let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\n}\n    \nshowDeleteAlert() {\n  this.setState({alert: 'Note Deleted!'})\n  \n  let hideAlert = setTimeout(this.hideAlert.bind(this), 1000);\n}\n\nhideAlert() {\n  this.setState({alert: ''})\n}\n\n// Set new note background color to green - default\nselectGreen() {\n  this.setState({color: 'green'})\n}\n\n// Set new note background color to red\nselectRed() {\n  this.setState({color: 'red'})\n}\n\n// Set new note background color to blue\nselectBlue() {\n  this.setState({color: 'blue'})\n}\n\n// Set new note background color to orange\nselectOrange() {\n  this.setState({color: 'orange'})\n}\n\n}\n\nReactDOM.render(<View />, document.querySelector('#app'));\n\nclass Controller {\n  addNote(newNote) {\n      newNote.id = (model.notes.length + 1);\n      model.notes.push(newNote);\n  }\n  \n  deleteNote(id) {\n      let new_notes = [];\n      for(let i = 0; i < model.notes.length; i++ ) {\n        if(model.notes[i]['id'] == id) {\n          // do nothing\n        } else {\n          new_notes.push(model.notes[i]);\n        }\n      }\n      model.notes = new_notes;\n  }\n}\n\nvar controller = new Controller();"]},"metadata":{},"sourceType":"module"}