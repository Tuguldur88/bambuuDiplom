{"ast":null,"code":"import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nexport function fakeAuthorize(user, password) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const result = await get('http://localhost:3001/login');\n      resolve(result.data.token);\n      alert(result.data.token);\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nexport function* authorize(user, password) {\n  try {\n    const token = yield call(fakeAuthorize, user, password);\n    yield put({\n      type: 'LOGIN_SUCCESS'\n    });\n    yield put({\n      type: 'SAVE_TOKEN',\n      token\n    });\n  } catch (error) {\n    yield put({\n      type: 'LOGIN_ERROR',\n      error\n    });\n  } finally {\n    if (yield cancelled()) {\n      yield put({\n        type: 'LOGIN_CANCELLED'\n      });\n    }\n  }\n}\nexport function* graphState() {\n  while (true) {\n    const {\n      user,\n      password\n    } = yield take('LOGIN_REQUEST');\n    const task = yield fork(authorize, user, password);\n    const action = yield take(['LOGOUT', 'LOGIN_ERROR']);\n\n    if (action.type === 'LOGOUT') {\n      yield cancel(task);\n      yield put({\n        type: 'DELETE_TOKEN'\n      });\n    }\n  }\n}\nexport function* logActions() {\n  while (true) {\n    const action = yield take('*');\n    console.log(action.type);\n  }\n}","map":{"version":3,"sources":["/home/tuguldur/MyDream/Diplom/notepad/src/_saga/sagas.js"],"names":["get","call","cancel","cancelled","fork","put","take","fakeAuthorize","user","password","Promise","resolve","reject","result","data","token","alert","error","authorize","type","graphState","task","action","logActions","console","log"],"mappings":"AAAA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6CC,IAA7C,QAAyD,oBAAzD;AACA,OAAO,SAASC,aAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AAC3C,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMb,GAAG,CAAC,6BAAD,CAAxB;AACAW,MAAAA,OAAO,CAACE,MAAM,CAACC,IAAP,CAAYC,KAAb,CAAP;AACAC,MAAAA,KAAK,CAACH,MAAM,CAACC,IAAP,CAAYC,KAAb,CAAL;AACD,KAJD,CAIE,OAAME,KAAN,EAAa;AACbL,MAAAA,MAAM,CAACK,KAAD,CAAN;AACD;AACF,GARM,CAAP;AASD;AAED,OAAO,UAAUC,SAAV,CAAoBV,IAApB,EAA0BC,QAA1B,EAAoC;AACzC,MAAI;AACF,UAAMM,KAAK,GAAG,MAAMd,IAAI,CAACM,aAAD,EAAgBC,IAAhB,EAAsBC,QAAtB,CAAxB;AACA,UAAMJ,GAAG,CAAC;AAACc,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAT;AACA,UAAMd,GAAG,CAAC;AAACc,MAAAA,IAAI,EAAE,YAAP;AAAqBJ,MAAAA;AAArB,KAAD,CAAT;AACD,GAJD,CAIE,OAAME,KAAN,EAAa;AACb,UAAMZ,GAAG,CAAC;AAACc,MAAAA,IAAI,EAAE,aAAP;AAAsBF,MAAAA;AAAtB,KAAD,CAAT;AACD,GAND,SAOQ;AACN,QAAI,MAAMd,SAAS,EAAnB,EAAuB;AACrB,YAAME,GAAG,CAAC;AAACc,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAT;AACD;AACF;AACF;AAED,OAAO,UAAUC,UAAV,GAAuB;AAC5B,SAAO,IAAP,EAAa;AACX,UAAM;AAACZ,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAmB,MAAMH,IAAI,CAAC,eAAD,CAAnC;AACA,UAAMe,IAAI,GAAG,MAAMjB,IAAI,CAACc,SAAD,EAAYV,IAAZ,EAAkBC,QAAlB,CAAvB;AACA,UAAMa,MAAM,GAAG,MAAMhB,IAAI,CAAC,CAAC,QAAD,EAAW,aAAX,CAAD,CAAzB;;AACA,QAAIgB,MAAM,CAACH,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAMjB,MAAM,CAACmB,IAAD,CAAZ;AACA,YAAMhB,GAAG,CAAC;AAACc,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAT;AACD;AACF;AACF;AAED,OAAO,UAAUI,UAAV,GAAuB;AAC5B,SAAO,IAAP,EAAa;AACX,UAAMD,MAAM,GAAG,MAAMhB,IAAI,CAAC,GAAD,CAAzB;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACH,IAAnB;AACD;AACF","sourcesContent":["import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nexport function fakeAuthorize (user, password) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const result = await get('http://localhost:3001/login');\n        resolve(result.data.token);\n        alert(result.data.token);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n  \n  export function* authorize(user, password) {\n    try {\n      const token = yield call(fakeAuthorize, user, password)\n      yield put({type: 'LOGIN_SUCCESS'})\n      yield put({type: 'SAVE_TOKEN', token});\n    } catch(error) {\n      yield put({type: 'LOGIN_ERROR', error})\n    }\n    finally {\n      if (yield cancelled()) {\n        yield put({type: 'LOGIN_CANCELLED'})\n      }\n    }\n  }\n  \n  export function* graphState() {\n    while (true) {\n      const {user, password} = yield take('LOGIN_REQUEST')\n      const task = yield fork(authorize, user, password)\n      const action = yield take(['LOGOUT', 'LOGIN_ERROR'])\n      if (action.type === 'LOGOUT') {\n        yield cancel(task)\n        yield put({type: 'DELETE_TOKEN'})\n      }\n    }\n  }\n  \n  export function* logActions() {\n    while (true) {\n      const action = yield take('*')\n      console.log(action.type);\n    }\n  }"]},"metadata":{},"sourceType":"module"}