{"ast":null,"code":"import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport { rootConstants } from '../_constants';\nimport qs from 'qs';\nexport function graphDataFetch(lessonName) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      alert(\"2 doh laert\", lessonName);\n      alert(lessonName);\n      fetch('http://localhost:3001/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n        },\n        body: qs.stringify({\n          'lessonname': lessonName\n        })\n      }).then(res => res.json()).then(data => {\n        alert(JSON.stringify(data));\n        resolve(data);\n      });\n    } catch (error) {\n      alert(\"4 doh laert\");\n      reject(error);\n    }\n  });\n}\nexport function* graphData(lessonName) {\n  try {\n    alert(\"ehni laert\", lessonName);\n    const lessonDatas = yield call(graphDataFetch, lessonName);\n    alert(JSON.stringify(lessonDatas));\n    yield put({\n      type: rootConstants.MODAL_TRUE,\n      data: \"sasdas\"\n    });\n  } catch (error) {\n    alert(\"error\");\n  } finally {\n    if (yield cancelled()) {\n      alert(\"cancel modal data \");\n    }\n  }\n}\nexport function* graphState() {\n  while (true) {\n    const {\n      data\n    } = yield take(rootConstants.MODAL_REQUEST);\n    yield put({\n      type: rootConstants.MODAL_REQUEST,\n      data: data\n    });\n    const setData = yield fork(graphData, data);\n  }\n}\nexport function* logActions() {\n  while (true) {\n    const action = yield take('*');\n    console.log(action.type);\n  }\n}","map":{"version":3,"sources":["/home/tuguldur/MyDream/Diplom/notepad/src/_saga/sagas.js"],"names":["get","call","cancel","cancelled","fork","put","take","rootConstants","qs","graphDataFetch","lessonName","Promise","resolve","reject","alert","fetch","method","headers","body","stringify","then","res","json","data","JSON","error","graphData","lessonDatas","type","MODAL_TRUE","graphState","MODAL_REQUEST","setData","logActions","action","console","log"],"mappings":"AAAA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6CC,IAA7C,QAAyD,oBAAzD;AACA,SAAQC,aAAR,QAA4B,eAA5B;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,OAAO,SAASC,cAAT,CAAyBC,UAAzB,EAAqC;AACxC,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI;AACFC,MAAAA,KAAK,CAAC,aAAD,EAAgBJ,UAAhB,CAAL;AACAI,MAAAA,KAAK,CAACJ,UAAD,CAAL;AACAK,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,QAAAA,MAAM,EAAE,MAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF0B;AAKnCC,QAAAA,IAAI,EAAGV,EAAE,CAACW,SAAH,CAAa;AAAC,wBAAcT;AAAf,SAAb;AAL4B,OAAhC,CAAL,CAOCU,IAPD,CAOOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPf,EAQCF,IARD,CAQOG,IAAD,IAAU;AAAET,QAAAA,KAAK,CAACU,IAAI,CAACL,SAAL,CAAeI,IAAf,CAAD,CAAL;AAChBX,QAAAA,OAAO,CAACW,IAAD,CAAP;AACD,OAVD;AAWD,KAdD,CAcE,OAAME,KAAN,EAAa;AACbX,MAAAA,KAAK,CAAC,aAAD,CAAL;AACAD,MAAAA,MAAM,CAACY,KAAD,CAAN;AACD;AACF,GAnBM,CAAP;AAoBD;AAED,OAAO,UAAUC,SAAV,CAAoBhB,UAApB,EAAgC;AACrC,MAAI;AACHI,IAAAA,KAAK,CAAC,YAAD,EAAeJ,UAAf,CAAL;AACC,UAAMiB,WAAW,GAAG,MAAM1B,IAAI,CAACQ,cAAD,EAAiBC,UAAjB,CAA9B;AACAI,IAAAA,KAAK,CAACU,IAAI,CAACL,SAAL,CAAeQ,WAAf,CAAD,CAAL;AACA,UAAMtB,GAAG,CAAC;AAACuB,MAAAA,IAAI,EAAErB,aAAa,CAACsB,UAArB;AAAiCN,MAAAA,IAAI,EAAE;AAAvC,KAAD,CAAT;AACD,GALD,CAKE,OAAME,KAAN,EAAa;AACbX,IAAAA,KAAK,CAAC,OAAD,CAAL;AACD,GAPD,SAQQ;AACN,QAAI,MAAMX,SAAS,EAAnB,EAAuB;AACnBW,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACH;AACF;AACF;AAED,OAAO,UAAUgB,UAAV,GAAuB;AAC5B,SAAO,IAAP,EAAa;AACT,UAAM;AAACP,MAAAA;AAAD,QAAS,MAAMjB,IAAI,CAACC,aAAa,CAACwB,aAAf,CAAzB;AACA,UAAM1B,GAAG,CAAC;AAACuB,MAAAA,IAAI,EAAErB,aAAa,CAACwB,aAArB;AAAoCR,MAAAA,IAAI,EAAEA;AAA1C,KAAD,CAAT;AACA,UAAMS,OAAO,GAAG,MAAM5B,IAAI,CAACsB,SAAD,EAAYH,IAAZ,CAA1B;AAGH;AACF;AAED,OAAO,UAAUU,UAAV,GAAuB;AAC5B,SAAO,IAAP,EAAa;AACX,UAAMC,MAAM,GAAG,MAAM5B,IAAI,CAAC,GAAD,CAAzB;AACA6B,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACN,IAAnB;AACD;AACF","sourcesContent":["import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport {rootConstants} from '../_constants';\nimport qs from 'qs';\n\nexport function graphDataFetch (lessonName) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        alert(\"2 doh laert\", lessonName)\n        alert(lessonName)\n        fetch('http://localhost:3001/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n          },\n          body: \tqs.stringify({'lessonname': lessonName})\n        })\n        .then((res) => res.json())\n        .then((data) => { alert(JSON.stringify(data))\n          resolve(data)\n        })\n      } catch(error) {\n        alert(\"4 doh laert\")\n        reject(error);\n      }\n    });\n  }\n  \n  export function* graphData(lessonName) {\n    try {\n     alert(\"ehni laert\", lessonName)\n      const lessonDatas = yield call(graphDataFetch, lessonName)\n      alert(JSON.stringify(lessonDatas))\n      yield put({type: rootConstants.MODAL_TRUE ,data: \"sasdas\"})\n    } catch(error) {\n      alert(\"error\")\n    }\n    finally {\n      if (yield cancelled()) {\n          alert(\"cancel modal data \")\n      }\n    }\n  }\n  \n  export function* graphState() {\n    while (true) {\n        const {data} = yield take(rootConstants.MODAL_REQUEST)\n        yield put({type: rootConstants.MODAL_REQUEST ,data: data})\n        const setData = yield fork(graphData, data)\n\n\n    }\n  }\n  \n  export function* logActions() {\n    while (true) {\n      const action = yield take('*')\n      console.log(action.type);\n    }\n  }"]},"metadata":{},"sourceType":"module"}