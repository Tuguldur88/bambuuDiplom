{"ast":null,"code":"var _jsxFileName = \"/home/tuguldur/MyDream/Diplom/notepad/src/_screens/classScreen.js\";\nimport React from 'react';\nimport './classCss.css';\nimport { Link } from 'react-router-dom';\nimport { rootConstants } from '../_constants';\nimport { connect } from 'react-redux';\nimport history from '../_store/history';\nimport schoolData from '../_data/schoolData';\nimport PlanPrint from '../_components/_lessonPlan/planPrint';\nimport { allActions } from '../_actions';\nimport GridLayout from 'react-grid-layout';\nimport { Motion, spring } from 'react-motion';\nconst dataStructure = [// structure that models our initial rendered view of items\n[0, 1, 2], [3, 4, 5, 6, 7], [8, 9, 10, 11]];\n\nconst reinsert = (array, colFrom, rowFrom, colTo, rowTo) => {\n  const _array = array.slice(0);\n\n  const val = _array[colFrom][rowFrom];\n\n  _array[colFrom].splice(rowFrom, 1);\n\n  _array[colTo].splice(rowTo, 0, val);\n\n  calculateVisiblePositions(_array);\n  return _array;\n};\n\nconst gutterPadding = 21;\n\nconst clamp = (n, min, max) => Math.max(Math.min(n, max), min);\n\nconst getColumnWidth = () => window.innerWidth / dataStructure.length - gutterPadding / dataStructure.length; // spread columns over available window width\n\n\nconst height = 110; // crappy fixed item height :(\n\nlet width = getColumnWidth(),\n    layout = null; // items are ordered by their index in this visual positions array\n\nconst calculateVisiblePositions = newOrder => {\n  width = getColumnWidth();\n}; // define spring motion opts\n\n\nconst springSetting1 = {\n  stiffness: 180,\n  damping: 10\n};\nconst springSetting2 = {\n  stiffness: 150,\n  damping: 16\n};\n\nclass classScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      mouse: [0, 0],\n      delta: [0, 0],\n      // difference between mouse and item position, for dragging\n      lastPress: null,\n      // key of the last pressed component\n      currentColumn: null,\n      isPressed: false,\n      order: dataStructure,\n      // index: visual position. value: component key/id\n      isResizing: false\n    };\n  }\n\n  componentWillMount() {\n    this.resizeTimeout = null;\n    calculateVisiblePositions(dataStructure);\n  }\n\n  componentDidMount() {\n    window.addEventListener('touchmove', this.handleTouchMove);\n    window.addEventListener('mousemove', this.handleMouseMove);\n    window.addEventListener('touchend', this.handleMouseUp);\n    window.addEventListener('mouseup', this.handleMouseUp);\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleTouchStart(key, currentColumn, pressLocation, e) {\n    this.handleMouseDown(key, currentColumn, pressLocation, e.touches[0]);\n  }\n\n  handleTouchMove(e) {\n    e.preventDefault();\n    this.handleMouseMove(e.touches[0]);\n  }\n\n  handleMouseMove({\n    pageX,\n    pageY\n  }) {\n    const {\n      order,\n      lastPress,\n      currentColumn: colFrom,\n      isPressed,\n      delta: [dx, dy]\n    } = this.state;\n\n    if (isPressed) {\n      const mouse = [pageX - dx, pageY - dy];\n      const colTo = clamp(Math.floor((mouse[0] + width / 2) / width), 0, 2);\n      const rowTo = clamp(Math.floor((mouse[1] + height / 2) / height), 0, 100);\n      const rowFrom = order[colFrom].indexOf(lastPress);\n      const newOrder = reinsert(order, colFrom, rowFrom, colTo, rowTo);\n      this.setState({\n        mouse,\n        order: newOrder,\n        currentColumn: colTo\n      });\n    }\n  }\n\n  handleMouseDown(key, currentColumn, [pressX, pressY], {\n    pageX,\n    pageY\n  }) {\n    this.setState({\n      lastPress: key,\n      currentColumn,\n      isPressed: true,\n      delta: [pageX - pressX, pageY - pressY],\n      mouse: [pressX, pressY]\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      isPressed: false,\n      delta: [0, 0]\n    });\n  }\n\n  handleResize() {\n    clearTimeout(this.resizeTimeout);\n    this.applyResizingState(true); // resize one last time after resizing stops, as sometimes this can be a little janky sometimes...\n\n    this.resizeTimeout = setTimeout(() => this.applyResizingState(false), 100);\n  }\n\n  applyResizingState(isResizing) {\n    this.setState({\n      isResizing\n    });\n    calculateVisiblePositions(dataStructure);\n  }\n\n  render() {\n    const {\n      order,\n      lastPress,\n      currentColumn,\n      isPressed,\n      mouse,\n      isResizing\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, order.map((column, colIndex) => {\n      return column.map(row => {\n        let style,\n            x,\n            y,\n            visualPosition = order[colIndex].indexOf(row),\n            isActive = row === lastPress && colIndex === currentColumn && isPressed;\n\n        if (isActive) {\n          [x, y] = mouse;\n          style = {\n            translateX: x,\n            translateY: y,\n            scale: spring(1.1, springSetting1)\n          };\n        } else if (isResizing) {\n          [x, y] = layout[colIndex][visualPosition];\n          style = {\n            translateX: x,\n            translateY: y,\n            scale: 1\n          };\n        } else {\n          [x, y] = layout[colIndex][visualPosition];\n          style = {\n            translateX: spring(x, springSetting2),\n            translateY: spring(y, springSetting2),\n            scale: spring(1, springSetting1)\n          };\n        }\n\n        return React.createElement(Motion, {\n          key: row,\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, ({\n          translateX,\n          translateY,\n          scale\n        }) => React.createElement(\"div\", {\n          onMouseDown: this.handleMouseDown.bind(null, row, colIndex, [x, y]),\n          onTouchStart: this.handleTouchStart.bind(null, row, colIndex, [x, y]),\n          className: isActive ? 'item is-active' : 'item',\n          style: {\n            WebkitTransform: `translate3d(${translateX}px, ${translateY}px, 0) scale(${scale})`,\n            transform: `translate3d(${translateX}px, ${translateY}px, 0) scale(${scale})`,\n            zIndex: row === lastPress && colIndex === currentColumn ? 99 : visualPosition\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, \"Itemddddddddddddddddddddddddddddd\", row + 1));\n      });\n    }));\n  }\n\n}\n\n;\nexport default connect(allActions.mapStateToProps, allActions.mapDispatchToProps)(classScreen);","map":{"version":3,"sources":["/home/tuguldur/MyDream/Diplom/notepad/src/_screens/classScreen.js"],"names":["React","Link","rootConstants","connect","history","schoolData","PlanPrint","allActions","GridLayout","Motion","spring","dataStructure","reinsert","array","colFrom","rowFrom","colTo","rowTo","_array","slice","val","splice","calculateVisiblePositions","gutterPadding","clamp","n","min","max","Math","getColumnWidth","window","innerWidth","length","height","width","layout","newOrder","springSetting1","stiffness","damping","springSetting2","classScreen","Component","constructor","props","handleClick","bind","state","mouse","delta","lastPress","currentColumn","isPressed","order","isResizing","componentWillMount","resizeTimeout","componentDidMount","addEventListener","handleTouchMove","handleMouseMove","handleMouseUp","handleResize","componentWillUnmount","removeEventListener","handleTouchStart","key","pressLocation","e","handleMouseDown","touches","preventDefault","pageX","pageY","dx","dy","floor","indexOf","setState","pressX","pressY","clearTimeout","applyResizingState","setTimeout","render","map","column","colIndex","row","style","x","y","visualPosition","isActive","translateX","translateY","scale","WebkitTransform","transform","zIndex","mapStateToProps","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAAUC,IAAV,QAAsB,kBAAtB;AACA,SAAQC,aAAR,QAA4B,eAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAQC,OAAR,MAAsB,mBAAtB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAAQC,MAAR,EAAgBC,MAAhB,QAA6B,cAA7B;AACA,MAAMC,aAAa,GAAG,CAAE;AACtB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADoB,EAEpB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAFoB,EAGpB,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,CAHoB,CAAtB;;AAMA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,EAA0BC,KAA1B,EAAiCC,KAAjC,KAA2C;AAC1D,QAAMC,MAAM,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,CAAf;;AACA,QAAMC,GAAG,GAAGF,MAAM,CAACJ,OAAD,CAAN,CAAgBC,OAAhB,CAAZ;;AACAG,EAAAA,MAAM,CAACJ,OAAD,CAAN,CAAgBO,MAAhB,CAAuBN,OAAvB,EAAgC,CAAhC;;AACAG,EAAAA,MAAM,CAACF,KAAD,CAAN,CAAcK,MAAd,CAAqBJ,KAArB,EAA4B,CAA5B,EAA+BG,GAA/B;;AACAE,EAAAA,yBAAyB,CAACJ,MAAD,CAAzB;AACA,SAAOA,MAAP;AACD,CAPD;;AASA,MAAMK,aAAa,GAAG,EAAtB;;AACA,MAAMC,KAAK,GAAG,CAACC,CAAD,EAAIC,GAAJ,EAASC,GAAT,KAAiBC,IAAI,CAACD,GAAL,CAASC,IAAI,CAACF,GAAL,CAASD,CAAT,EAAYE,GAAZ,CAAT,EAA2BD,GAA3B,CAA/B;;AACA,MAAMG,cAAc,GAAG,MAAOC,MAAM,CAACC,UAAP,GAAoBpB,aAAa,CAACqB,MAAnC,GAA8CT,aAAa,GAAGZ,aAAa,CAACqB,MAAzG,C,CAAkH;;;AAClH,MAAMC,MAAM,GAAG,GAAf,C,CAAoB;;AAEpB,IAAIC,KAAK,GAAGL,cAAc,EAA1B;AAAA,IACEM,MAAM,GAAG,IADX,C,CAGA;;AACA,MAAMb,yBAAyB,GAAIc,QAAD,IAAc;AAC9CF,EAAAA,KAAK,GAAGL,cAAc,EAAtB;AACD,CAFD,C,CAIA;;;AACA,MAAMQ,cAAc,GAAG;AAACC,EAAAA,SAAS,EAAE,GAAZ;AAAiBC,EAAAA,OAAO,EAAE;AAA1B,CAAvB;AACA,MAAMC,cAAc,GAAG;AAACF,EAAAA,SAAS,EAAE,GAAZ;AAAiBC,EAAAA,OAAO,EAAE;AAA1B,CAAvB;;AACA,MAAME,WAAN,SAA0BzC,KAAK,CAAC0C,SAAhC,CAA0C;AAExCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CADI;AAEXC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFI;AAEI;AACfC,MAAAA,SAAS,EAAE,IAHA;AAGM;AACjBC,MAAAA,aAAa,EAAE,IAJJ;AAKXC,MAAAA,SAAS,EAAE,KALA;AAMXC,MAAAA,KAAK,EAAE1C,aANI;AAMW;AACtB2C,MAAAA,UAAU,EAAE;AAPD,KAAb;AASD;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,aAAL,GAAqB,IAArB;AACAlC,IAAAA,yBAAyB,CAACX,aAAD,CAAzB;AACH;;AAED8C,EAAAA,iBAAiB,GAAG;AAChB3B,IAAAA,MAAM,CAAC4B,gBAAP,CAAwB,WAAxB,EAAqC,KAAKC,eAA1C;AACA7B,IAAAA,MAAM,CAAC4B,gBAAP,CAAwB,WAAxB,EAAqC,KAAKE,eAA1C;AACA9B,IAAAA,MAAM,CAAC4B,gBAAP,CAAwB,UAAxB,EAAoC,KAAKG,aAAzC;AACA/B,IAAAA,MAAM,CAAC4B,gBAAP,CAAwB,SAAxB,EAAmC,KAAKG,aAAxC;AACA/B,IAAAA,MAAM,CAAC4B,gBAAP,CAAwB,QAAxB,EAAkC,KAAKI,YAAvC;AACH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnBjC,IAAAA,MAAM,CAACkC,mBAAP,CAA2B,QAA3B,EAAqC,KAAKF,YAA1C;AACH;;AAEDG,EAAAA,gBAAgB,CAACC,GAAD,EAAMf,aAAN,EAAqBgB,aAArB,EAAoCC,CAApC,EAAuC;AACnD,SAAKC,eAAL,CAAqBH,GAArB,EAA0Bf,aAA1B,EAAyCgB,aAAzC,EAAwDC,CAAC,CAACE,OAAF,CAAU,CAAV,CAAxD;AACH;;AAEDX,EAAAA,eAAe,CAACS,CAAD,EAAI;AACfA,IAAAA,CAAC,CAACG,cAAF;AACA,SAAKX,eAAL,CAAqBQ,CAAC,CAACE,OAAF,CAAU,CAAV,CAArB;AACH;;AAEDV,EAAAA,eAAe,CAAC;AAACY,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAiB;AAC5B,UAAM;AAACpB,MAAAA,KAAD;AAAQH,MAAAA,SAAR;AAAmBC,MAAAA,aAAa,EAAErC,OAAlC;AAA2CsC,MAAAA,SAA3C;AAAsDH,MAAAA,KAAK,EAAE,CAACyB,EAAD,EAAKC,EAAL;AAA7D,QAAyE,KAAK5B,KAApF;;AACA,QAAIK,SAAJ,EAAe;AACX,YAAMJ,KAAK,GAAG,CAACwB,KAAK,GAAGE,EAAT,EAAaD,KAAK,GAAGE,EAArB,CAAd;AACA,YAAM3D,KAAK,GAAGQ,KAAK,CAACI,IAAI,CAACgD,KAAL,CAAW,CAAC5B,KAAK,CAAC,CAAD,CAAL,GAAYd,KAAK,GAAG,CAArB,IAA2BA,KAAtC,CAAD,EAA+C,CAA/C,EAAkD,CAAlD,CAAnB;AACA,YAAMjB,KAAK,GAAGO,KAAK,CAACI,IAAI,CAACgD,KAAL,CAAW,CAAC5B,KAAK,CAAC,CAAD,CAAL,GAAYf,MAAM,GAAG,CAAtB,IAA4BA,MAAvC,CAAD,EAAiD,CAAjD,EAAoD,GAApD,CAAnB;AACA,YAAMlB,OAAO,GAAGsC,KAAK,CAACvC,OAAD,CAAL,CAAe+D,OAAf,CAAuB3B,SAAvB,CAAhB;AACA,YAAMd,QAAQ,GAAGxB,QAAQ,CAACyC,KAAD,EAAQvC,OAAR,EAAiBC,OAAjB,EAA0BC,KAA1B,EAAiCC,KAAjC,CAAzB;AACA,WAAK6D,QAAL,CAAc;AACV9B,QAAAA,KADU;AAEVK,QAAAA,KAAK,EAAEjB,QAFG;AAGVe,QAAAA,aAAa,EAAEnC;AAHL,OAAd;AAKH;AACJ;;AAEDqD,EAAAA,eAAe,CAACH,GAAD,EAAMf,aAAN,EAAqB,CAAC4B,MAAD,EAASC,MAAT,CAArB,EAAuC;AAACR,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAvC,EAAuD;AAClE,SAAKK,QAAL,CAAc;AACV5B,MAAAA,SAAS,EAAEgB,GADD;AAEVf,MAAAA,aAFU;AAGVC,MAAAA,SAAS,EAAE,IAHD;AAIVH,MAAAA,KAAK,EAAE,CAACuB,KAAK,GAAGO,MAAT,EAAiBN,KAAK,GAAGO,MAAzB,CAJG;AAKVhC,MAAAA,KAAK,EAAE,CAAC+B,MAAD,EAASC,MAAT;AALG,KAAd;AAOH;;AAEDnB,EAAAA,aAAa,GAAG;AACZ,SAAKiB,QAAL,CAAc;AACV1B,MAAAA,SAAS,EAAE,KADD;AAEVH,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFG,KAAd;AAIH;;AAEDa,EAAAA,YAAY,GAAG;AACXmB,IAAAA,YAAY,CAAC,KAAKzB,aAAN,CAAZ;AACA,SAAK0B,kBAAL,CAAwB,IAAxB,EAFW,CAGX;;AACA,SAAK1B,aAAL,GAAqB2B,UAAU,CAAC,MAAM,KAAKD,kBAAL,CAAwB,KAAxB,CAAP,EAAuC,GAAvC,CAA/B;AACH;;AAEDA,EAAAA,kBAAkB,CAAC5B,UAAD,EAAa;AAC3B,SAAKwB,QAAL,CAAc;AAAExB,MAAAA;AAAF,KAAd;AACAhC,IAAAA,yBAAyB,CAACX,aAAD,CAAzB;AACH;;AAEDyE,EAAAA,MAAM,GAAG;AACL,UAAM;AAAE/B,MAAAA,KAAF;AAASH,MAAAA,SAAT;AAAoBC,MAAAA,aAApB;AAAmCC,MAAAA,SAAnC;AAA8CJ,MAAAA,KAA9C;AAAqDM,MAAAA;AAArD,QAAoE,KAAKP,KAA/E;AACA,WACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKM,KAAK,CAACgC,GAAN,CAAW,CAACC,MAAD,EAASC,QAAT,KAAsB;AAC9B,aACID,MAAM,CAACD,GAAP,CAAaG,GAAD,IAAS;AACjB,YAAIC,KAAJ;AAAA,YACIC,CADJ;AAAA,YAEIC,CAFJ;AAAA,YAGIC,cAAc,GAAGvC,KAAK,CAACkC,QAAD,CAAL,CAAgBV,OAAhB,CAAwBW,GAAxB,CAHrB;AAAA,YAIIK,QAAQ,GAAIL,GAAG,KAAKtC,SAAR,IAAqBqC,QAAQ,KAAKpC,aAAlC,IAAmDC,SAJnE;;AAMA,YAAGyC,QAAH,EAAa;AACT,WAACH,CAAD,EAAIC,CAAJ,IAAS3C,KAAT;AACAyC,UAAAA,KAAK,GAAG;AACJK,YAAAA,UAAU,EAAEJ,CADR;AAEJK,YAAAA,UAAU,EAAEJ,CAFR;AAGJK,YAAAA,KAAK,EAAEtF,MAAM,CAAC,GAAD,EAAM2B,cAAN;AAHT,WAAR;AAKH,SAPD,MAOO,IAAGiB,UAAH,EAAe;AAClB,WAACoC,CAAD,EAAIC,CAAJ,IAASxD,MAAM,CAACoD,QAAD,CAAN,CAAiBK,cAAjB,CAAT;AACAH,UAAAA,KAAK,GAAG;AACJK,YAAAA,UAAU,EAAEJ,CADR;AAEJK,YAAAA,UAAU,EAAEJ,CAFR;AAGJK,YAAAA,KAAK,EAAE;AAHH,WAAR;AAKH,SAPM,MAOA;AACH,WAACN,CAAD,EAAIC,CAAJ,IAASxD,MAAM,CAACoD,QAAD,CAAN,CAAiBK,cAAjB,CAAT;AACAH,UAAAA,KAAK,GAAG;AACJK,YAAAA,UAAU,EAAEpF,MAAM,CAACgF,CAAD,EAAIlD,cAAJ,CADd;AAEJuD,YAAAA,UAAU,EAAErF,MAAM,CAACiF,CAAD,EAAInD,cAAJ,CAFd;AAGJwD,YAAAA,KAAK,EAAEtF,MAAM,CAAC,CAAD,EAAI2B,cAAJ;AAHT,WAAR;AAKH;;AAED,eACI,oBAAC,MAAD;AAAQ,UAAA,GAAG,EAAEmD,GAAb;AAAkB,UAAA,KAAK,EAAEC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,CAAC;AAACK,UAAAA,UAAD;AAAaC,UAAAA,UAAb;AAAyBC,UAAAA;AAAzB,SAAD,KACD;AACI,UAAA,WAAW,EAAE,KAAK3B,eAAL,CAAqBvB,IAArB,CAA0B,IAA1B,EAAgC0C,GAAhC,EAAqCD,QAArC,EAA+C,CAACG,CAAD,EAAIC,CAAJ,CAA/C,CADjB;AAEI,UAAA,YAAY,EAAE,KAAK1B,gBAAL,CAAsBnB,IAAtB,CAA2B,IAA3B,EAAiC0C,GAAjC,EAAsCD,QAAtC,EAAgD,CAACG,CAAD,EAAIC,CAAJ,CAAhD,CAFlB;AAGI,UAAA,SAAS,EAAEE,QAAQ,GAAG,gBAAH,GAAsB,MAH7C;AAII,UAAA,KAAK,EAAE;AACHI,YAAAA,eAAe,EAAG,eAAcH,UAAW,OAAMC,UAAW,gBAAeC,KAAM,GAD9E;AAEHE,YAAAA,SAAS,EAAG,eAAcJ,UAAW,OAAMC,UAAW,gBAAeC,KAAM,GAFxE;AAGHG,YAAAA,MAAM,EAAGX,GAAG,KAAKtC,SAAR,IAAqBqC,QAAQ,KAAKpC,aAAnC,GAAoD,EAApD,GAAyDyC;AAH9D,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAQyCJ,GAAG,GAAG,CAR/C,CAFJ,CADJ;AAeH,OA7CD,CADJ;AAgDH,KAjDA,CADL,CADJ;AAsDH;;AA/IuC;;AAgJzC;AACD,eAAerF,OAAO,CAACI,UAAU,CAAC6F,eAAZ,EAA4B7F,UAAU,CAAC8F,kBAAvC,CAAP,CAAkE5D,WAAlE,CAAf","sourcesContent":["import React from 'react';\nimport './classCss.css';\nimport {  Link } from 'react-router-dom';\nimport {rootConstants} from '../_constants';\nimport { connect } from 'react-redux';\nimport  history  from '../_store/history';\nimport schoolData from '../_data/schoolData';\nimport PlanPrint from '../_components/_lessonPlan/planPrint';\nimport {allActions} from '../_actions'\nimport GridLayout from 'react-grid-layout';\nimport {Motion, spring} from 'react-motion';\nconst dataStructure = [ // structure that models our initial rendered view of items\n  [0, 1, 2],\n  [3, 4, 5, 6, 7],\n  [8, 9, 10, 11]\n]\n\nconst reinsert = (array, colFrom, rowFrom, colTo, rowTo) => {\n  const _array = array.slice(0);\n  const val = _array[colFrom][rowFrom];\n  _array[colFrom].splice(rowFrom, 1);\n  _array[colTo].splice(rowTo, 0, val);\n  calculateVisiblePositions(_array);\n  return _array;\n}\n\nconst gutterPadding = 21;\nconst clamp = (n, min, max) => Math.max(Math.min(n, max), min);\nconst getColumnWidth = () => (window.innerWidth / dataStructure.length) - (gutterPadding / dataStructure.length); // spread columns over available window width\nconst height = 110; // crappy fixed item height :(\n\nlet width = getColumnWidth(),\n  layout = null;\n\n// items are ordered by their index in this visual positions array\nconst calculateVisiblePositions = (newOrder) => {\n  width = getColumnWidth();\n}\n\n// define spring motion opts\nconst springSetting1 = {stiffness: 180, damping: 10};\nconst springSetting2 = {stiffness: 150, damping: 16};\nclass classScreen extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      mouse: [0, 0],\n      delta: [0, 0], // difference between mouse and item position, for dragging\n      lastPress: null, // key of the last pressed component\n      currentColumn: null,\n      isPressed: false,\n      order: dataStructure, // index: visual position. value: component key/id\n      isResizing: false\n    };\n  }\n\n  componentWillMount() {\n      this.resizeTimeout = null;\n      calculateVisiblePositions(dataStructure);\n  }\n\n  componentDidMount() {\n      window.addEventListener('touchmove', this.handleTouchMove);\n      window.addEventListener('mousemove', this.handleMouseMove);\n      window.addEventListener('touchend', this.handleMouseUp);\n      window.addEventListener('mouseup', this.handleMouseUp);\n      window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleTouchStart(key, currentColumn, pressLocation, e) {\n      this.handleMouseDown(key, currentColumn, pressLocation, e.touches[0]);\n  }\n\n  handleTouchMove(e) {\n      e.preventDefault();\n      this.handleMouseMove(e.touches[0]);\n  }\n\n  handleMouseMove({pageX, pageY}) {\n      const {order, lastPress, currentColumn: colFrom, isPressed, delta: [dx, dy]} = this.state;\n      if (isPressed) {\n          const mouse = [pageX - dx, pageY - dy];\n          const colTo = clamp(Math.floor((mouse[0] + (width / 2)) / width), 0, 2);\n          const rowTo = clamp(Math.floor((mouse[1] + (height / 2)) / height), 0, 100);\n          const rowFrom = order[colFrom].indexOf(lastPress);\n          const newOrder = reinsert(order, colFrom, rowFrom, colTo, rowTo);\n          this.setState({\n              mouse,\n              order: newOrder,\n              currentColumn: colTo\n          });\n      }\n  }\n\n  handleMouseDown(key, currentColumn, [pressX, pressY], {pageX, pageY}) {\n      this.setState({\n          lastPress: key,\n          currentColumn,\n          isPressed: true,\n          delta: [pageX - pressX, pageY - pressY],\n          mouse: [pressX, pressY],\n      });\n  }\n\n  handleMouseUp() {\n      this.setState({\n          isPressed: false,\n          delta: [0, 0]\n      });\n  }\n\n  handleResize() {\n      clearTimeout(this.resizeTimeout);\n      this.applyResizingState(true);\n      // resize one last time after resizing stops, as sometimes this can be a little janky sometimes...\n      this.resizeTimeout = setTimeout(() => this.applyResizingState(false), 100);\n  }\n\n  applyResizingState(isResizing) {\n      this.setState({ isResizing });\n      calculateVisiblePositions(dataStructure);\n  }\n\n  render() {\n      const { order, lastPress, currentColumn, isPressed, mouse, isResizing } = this.state;\n      return (\n          <div className=\"items\">\n              {order.map( (column, colIndex) => {\n                  return (\n                      column.map( (row) => {\n                          let style,\n                              x,\n                              y,\n                              visualPosition = order[colIndex].indexOf(row),\n                              isActive = (row === lastPress && colIndex === currentColumn && isPressed);\n\n                          if(isActive) {\n                              [x, y] = mouse;\n                              style = {\n                                  translateX: x,\n                                  translateY: y,\n                                  scale: spring(1.1, springSetting1)\n                              };\n                          } else if(isResizing) {\n                              [x, y] = layout[colIndex][visualPosition];\n                              style = {\n                                  translateX: x,\n                                  translateY: y,\n                                  scale: 1\n                              };\n                          } else {\n                              [x, y] = layout[colIndex][visualPosition];\n                              style = {\n                                  translateX: spring(x, springSetting2),\n                                  translateY: spring(y, springSetting2),\n                                  scale: spring(1, springSetting1)\n                              };\n                          }\n\n                          return (\n                              <Motion key={row} style={style}>\n                                  {({translateX, translateY, scale}) =>\n                                  <div\n                                      onMouseDown={this.handleMouseDown.bind(null, row, colIndex, [x, y])}\n                                      onTouchStart={this.handleTouchStart.bind(null, row, colIndex, [x, y])}\n                                      className={isActive ? 'item is-active' : 'item'}\n                                      style={{\n                                          WebkitTransform: `translate3d(${translateX}px, ${translateY}px, 0) scale(${scale})`,\n                                          transform: `translate3d(${translateX}px, ${translateY}px, 0) scale(${scale})`,\n                                          zIndex: (row === lastPress && colIndex === currentColumn) ? 99 : visualPosition,\n                                      }}>Itemddddddddddddddddddddddddddddd{row + 1}</div>\n                                  }\n                              </Motion>\n                          )\n                      })\n                  )\n              })}\n          </div>\n      )\n  }\n};\nexport default connect(allActions.mapStateToProps,allActions.mapDispatchToProps)(classScreen);\n"]},"metadata":{},"sourceType":"module"}