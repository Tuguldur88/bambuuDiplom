{"ast":null,"code":"import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport { rootConstants } from '../_constants';\nimport qs from 'qs'; //Grapic hesgiin datag avah serveres avah jhuselt yvulah heseg\n\nexport function graphDataFetch(lessonName) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      fetch('http://localhost:3001/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n        },\n        body: qs.stringify({\n          'lessonname': lessonName\n        })\n      }).then(res => res.json()).then(data => {\n        resolve(data);\n      });\n    } catch (error) {\n      alert(\"4 doh laert\");\n      reject(error);\n    }\n  });\n}\nexport function* graphData(lessonName) {\n  try {\n    const lessonDatas = yield call(graphDataFetch, lessonName);\n    yield put({\n      type: rootConstants.MODAL_TRUE,\n      data: lessonDatas\n    });\n  } catch (error) {\n    alert(\"error\");\n  } finally {\n    if (yield cancelled()) {\n      alert(\"cancel modal data \");\n    }\n  }\n}\nexport function* graphState() {\n  while (true) {\n    const {\n      data\n    } = yield take(rootConstants.MODAL_REQUEST);\n    yield put({\n      type: rootConstants.MODAL_REQUEST,\n      data: data\n    });\n    const setData = yield fork(graphData, data);\n  }\n}\nexport function* logActions() {\n  while (true) {\n    const action = yield take('*');\n    console.log(action.type);\n  }\n}","map":{"version":3,"sources":["/home/tuguldur/MyDream/Diplom/notepad/src/_saga/sagas.js"],"names":["get","call","cancel","cancelled","fork","put","take","rootConstants","qs","graphDataFetch","lessonName","Promise","resolve","reject","fetch","method","headers","body","stringify","then","res","json","data","error","alert","graphData","lessonDatas","type","MODAL_TRUE","graphState","MODAL_REQUEST","setData","logActions","action","console","log"],"mappings":"AAAA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6CC,IAA7C,QAAyD,oBAAzD;AACA,SAAQC,aAAR,QAA4B,eAA5B;AACA,OAAOC,EAAP,MAAe,IAAf,C,CACA;;AACA,OAAO,SAASC,cAAT,CAAyBC,UAAzB,EACP;AACI,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KACnB;AACI,QACA;AACIC,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACjCC,QAAAA,MAAM,EAAE,MADyB;AAEjCC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFwB;AAKjCC,QAAAA,IAAI,EAAGT,EAAE,CAACU,SAAH,CAAa;AAAC,wBAAcR;AAAf,SAAb;AAL0B,OAAhC,CAAL,CAOCS,IAPD,CAOOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPf,EAQCF,IARD,CAQOG,IAAD,IAAU;AACZV,QAAAA,OAAO,CAACU,IAAD,CAAP;AAAc,OATlB;AAUH,KAZD,CAaA,OAAMC,KAAN,EACA;AACIC,MAAAA,KAAK,CAAC,aAAD,CAAL;AACAX,MAAAA,MAAM,CAACU,KAAD,CAAN;AACH;AACJ,GApBM,CAAP;AAqBH;AAED,OAAO,UAAUE,SAAV,CAAoBf,UAApB,EAAgC;AACnC,MACA;AACI,UAAMgB,WAAW,GAAG,MAAMzB,IAAI,CAACQ,cAAD,EAAiBC,UAAjB,CAA9B;AACA,UAAML,GAAG,CAAC;AAACsB,MAAAA,IAAI,EAAEpB,aAAa,CAACqB,UAArB;AAAiCN,MAAAA,IAAI,EAAEI;AAAvC,KAAD,CAAT;AACH,GAJD,CAKA,OAAMH,KAAN,EACA;AACIC,IAAAA,KAAK,CAAC,OAAD,CAAL;AACH,GARD,SAUA;AACI,QAAI,MAAMrB,SAAS,EAAnB,EACA;AACIqB,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACH;AACJ;AACJ;AAED,OAAO,UAAUK,UAAV,GACP;AACI,SAAO,IAAP,EACA;AACI,UAAM;AAACP,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACC,aAAa,CAACuB,aAAf,CAAzB;AACA,UAAMzB,GAAG,CAAC;AAACsB,MAAAA,IAAI,EAAEpB,aAAa,CAACuB,aAArB;AAAoCR,MAAAA,IAAI,EAAEA;AAA1C,KAAD,CAAT;AACA,UAAMS,OAAO,GAAG,MAAM3B,IAAI,CAACqB,SAAD,EAAYH,IAAZ,CAA1B;AACH;AACJ;AAED,OAAO,UAAUU,UAAV,GACP;AACI,SAAO,IAAP,EACA;AACE,UAAMC,MAAM,GAAG,MAAM3B,IAAI,CAAC,GAAD,CAAzB;AACA4B,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACN,IAAnB;AACD;AACJ","sourcesContent":["import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport {rootConstants} from '../_constants';\nimport qs from 'qs';\n//Grapic hesgiin datag avah serveres avah jhuselt yvulah heseg\nexport function graphDataFetch (lessonName) \n{\n    return new Promise(async (resolve, reject) => \n    {\n        try \n        {  \n            fetch('http://localhost:3001/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n                },\n                body: \tqs.stringify({'lessonname': lessonName})\n            })\n            .then((res) => res.json())\n            .then((data) => {\n                resolve(data)})\n        } \n        catch(error) \n        {\n            alert(\"4 doh laert\")\n            reject(error);\n        }\n    });\n}\n\nexport function* graphData(lessonName) {\n    try \n    {\n        const lessonDatas = yield call(graphDataFetch, lessonName)\n        yield put({type: rootConstants.MODAL_TRUE ,data: lessonDatas})\n    } \n    catch(error) \n    {\n        alert(\"error\")\n    }\n    finally \n    {\n        if (yield cancelled()) \n        {\n            alert(\"cancel modal data \")\n        }\n    }\n}\n  \nexport function* graphState() \n{\n    while (true) \n    {\n        const {data} = yield take(rootConstants.MODAL_REQUEST)\n        yield put({type: rootConstants.MODAL_REQUEST ,data: data})\n        const setData = yield fork(graphData, data)\n    }\n}\n  \nexport function* logActions() \n{\n    while (true) \n    {\n      const action = yield take('*')\n      console.log(action.type);\n    }\n}"]},"metadata":{},"sourceType":"module"}