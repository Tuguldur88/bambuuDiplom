{"ast":null,"code":"import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport { rootConstants } from '../_constants';\nimport qs from 'qs';\nimport LessonDatas from '../_data/lessonData';\nconst Lessondatacopy = LessonDatas;\nconst Lessondata = [{\n  \"data1\": []\n}, {\n  \"data2\": []\n}, {\n  \"data3\": []\n}, {\n  \"data4\": []\n}, {\n  \"data5\": []\n}];\nconst datasss = [{\n  \"date\": \"2018\"\n}, {\n  \"spring\": [{\n    \"label\": \"A\",\n    \"y\": 20\n  }, {\n    \"label\": \"B\",\n    \"y\": 8\n  }, {\n    \"label\": \"C\",\n    \"y\": 4\n  }, {\n    \"label\": \"D\",\n    \"y\": 5\n  }, {\n    \"label\": \"F\",\n    \"y\": 6\n  }, {\n    \"label\": \"W\",\n    \"y\": 2\n  }, {\n    \"label\": \"I\",\n    \"y\": 2\n  }]\n}, {\n  \"autumn\": [{\n    \"label\": \"A\",\n    'y': 1\n  }, {\n    \"label\": \"B\",\n    \"y\": 8\n  }, {\n    \"label\": \"C\",\n    \"y\": 2\n  }, {\n    \"label\": \"D\",\n    \"y\": 9\n  }, {\n    \"label\": \"F\",\n    'y': 3\n  }, {\n    \"label\": \"W\",\n    \"y\": 2\n  }]\n}]; //Grapic hesgiin datag avah serveres avah jhuselt yvulah heseg\n\nexport function graphDataFetch(lessonName) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      fetch('http://localhost:3001/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n        },\n        body: qs.stringify({\n          'lessonname': lessonName\n        })\n      }).then(res => res.json()).then(data => {\n        resolve(data);\n      });\n    } catch (error) {\n      alert(\"4 doh laert\");\n      reject(error);\n    }\n  });\n}\nexport function* graphData(lessonName) {\n  try {\n    const lessonDatas = yield call(graphDataFetch, lessonName);\n    yield put({\n      type: rootConstants.MODAL_GRAP_TRUE,\n      data: lessonDatas\n    });\n  } catch (error) {\n    alert(\"error\");\n  } finally {\n    if (yield cancelled()) {\n      alert(\"cancel modal data \");\n    }\n  }\n}\nexport function* graphState() {\n  while (true) {\n    const {\n      data\n    } = yield take(rootConstants.MODAL_GRAP_REQUEST);\n    yield put({\n      type: rootConstants.MODAL_GRAP_REQUEST,\n      data: data\n    });\n    const setData = yield fork(graphData, data);\n  }\n}\nexport function lessonChooseFetch(index) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      fetch('http://localhost:3001/protected', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n        },\n        body: qs.stringify({\n          'lessonname': index\n        })\n      }).then(res => res.json()).then(data => {\n        resolve(data);\n      });\n    } catch (error) {\n      alert(\"4 doh laert\");\n      reject(error);\n    }\n  });\n}\nexport function* lessonChooseConstant(index) {\n  try {\n    const GrapData = yield call(lessonChooseFetch, index);\n  } catch (error) {\n    alert(\"error\");\n  } finally {\n    if (yield cancelled()) {\n      alert(\"cancel modal data \");\n    }\n  }\n}\nexport function* lessonChooseState() {\n  while (true) {\n    const {\n      data\n    } = yield take(rootConstants.LESSON_CHOOSE_REQUEST);\n    yield put({\n      type: rootConstants.MODAL_GRAP_REQUEST\n    });\n    const setData = yield fork(lessonChooseConstant, data);\n  }\n}\nexport function allLessonStateFetch(data, data1) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      var count = 0;\n\n      for (var i = 0; i < Lessondatacopy.length; i++) {\n        for (var j = 0; j < data.id.length; j++) {\n          if (Lessondatacopy[i].id == data.id[j]) {\n            Lessondatacopy[i].color = \"#66b3ff\";\n          }\n\n          if (Lessondatacopy[i].parent != data.id[j] && Lessondatacopy[i].parent != null) {\n            count++;\n          }\n        }\n\n        if (count == data.id.length && Lessondatacopy[i].parent != null) {\n          Lessondatacopy[i].color = \"#ff4d4d\";\n        }\n\n        count = 0;\n      }\n\n      for (var i = 0; i < Lessondatacopy.length; i++) {\n        if (LessonDatas[i].level == 1) {\n          Lessondata[0].data1.push(LessonDatas[i]);\n        }\n\n        if (LessonDatas[i].level == 2) {\n          Lessondata[1].data2.push(LessonDatas[i]);\n        }\n\n        if (LessonDatas[i].level == 3) {\n          Lessondata[2].data3.push(LessonDatas[i]);\n        }\n\n        if (LessonDatas[i].level == 4) {\n          Lessondata[3].data4.push(LessonDatas[i]);\n        }\n\n        if (LessonDatas[i].level == 5) {\n          Lessondata[4].data5.push(LessonDatas[i]);\n        }\n      }\n\n      resolve(Lessondata);\n    } catch (error) {\n      alert(\"4 doh laert\");\n      reject(error);\n    }\n  });\n}\nexport function* allLessonStateDispatch(data, data1) {\n  try {\n    const Lessondata = yield call(allLessonStateFetch, data, data1);\n    yield put({\n      type: rootConstants.LESSON_SET_DATA,\n      data: Lessondata\n    });\n  } catch (error) {\n    alert(\"LEsson ni error\");\n  } finally {\n    if (yield cancelled()) {\n      alert(\"buh hichel data orulhad alda garla\");\n    }\n  }\n}\nexport function* allLessonState() {\n  while (true) {\n    const {\n      data,\n      data1\n    } = yield take(rootConstants.MODAL_LESSON_FALSE);\n    const setData = yield fork(allLessonStateDispatch, data, data1);\n  }\n}","map":{"version":3,"sources":["/home/tuguldur/MyDream/Diplom/notepad/src/_saga/sagas.js"],"names":["get","call","cancel","cancelled","fork","put","take","rootConstants","qs","LessonDatas","Lessondatacopy","Lessondata","datasss","graphDataFetch","lessonName","Promise","resolve","reject","fetch","method","headers","body","stringify","then","res","json","data","error","alert","graphData","lessonDatas","type","MODAL_GRAP_TRUE","graphState","MODAL_GRAP_REQUEST","setData","lessonChooseFetch","index","lessonChooseConstant","GrapData","lessonChooseState","LESSON_CHOOSE_REQUEST","allLessonStateFetch","data1","count","i","length","j","id","color","parent","level","push","data2","data3","data4","data5","allLessonStateDispatch","LESSON_SET_DATA","allLessonState","MODAL_LESSON_FALSE"],"mappings":"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","sourcesContent":["import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport {rootConstants} from '../_constants';\nimport qs from 'qs';\nimport LessonDatas from '../_data/lessonData';\nconst Lessondatacopy = LessonDatas;\nconst Lessondata=[{\"data1\":[]},{\"data2\":[]},{\"data3\":[]},{\"data4\":[]},{\"data5\":[]}]\nconst datasss =[\n    {\"date\": \"2018\"},\n    {\"spring\":[\n                { \"label\": \"A\", \"y\": 20 },\n                { \"label\": \"B\", \"y\": 8 },\n                { \"label\": \"C\", \"y\": 4 },\n                { \"label\": \"D\", \"y\": 5 },\n                { \"label\": \"F\", \"y\": 6 },\n                { \"label\": \"W\", \"y\": 2 },\n                { \"label\": \"I\", \"y\": 2 }\n             ]},\n    {\"autumn\":[\n                { \"label\": \"A\", 'y': 1 },\n                { \"label\": \"B\", \"y\": 8 },\n                { \"label\": \"C\", \"y\": 2 },\n                { \"label\": \"D\", \"y\": 9 },\n                { \"label\": \"F\", 'y': 3 },\n                { \"label\": \"W\", \"y\": 2 },\n    ]}\n  \n  ]\n//Grapic hesgiin datag avah serveres avah jhuselt yvulah heseg\nexport function graphDataFetch (lessonName) \n{\n    return new Promise(async (resolve, reject) => \n    {\n        try \n        {  \n            fetch('http://localhost:3001/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n                },\n                body: \tqs.stringify({'lessonname': lessonName})\n            })\n            .then((res) => res.json())\n            .then((data) => {\n                resolve(data)})\n        } \n        catch(error) \n        {\n            alert(\"4 doh laert\")\n            reject(error);\n        }\n    });\n}\n\nexport function* graphData(lessonName) {\n    try \n    {\n        const lessonDatas = yield call(graphDataFetch, lessonName)\n        yield put({type: rootConstants.MODAL_GRAP_TRUE ,data: lessonDatas})\n    } \n    catch(error) \n    {\n        alert(\"error\")\n    }\n    finally \n    {\n        if (yield cancelled()) \n        {\n            alert(\"cancel modal data \")\n        }\n    }\n}\n  \nexport function* graphState() \n{\n    while (true) \n    {\n        const {data} = yield take(rootConstants.MODAL_GRAP_REQUEST)\n        yield put({type: rootConstants.MODAL_GRAP_REQUEST ,data: data})\n        const setData = yield fork(graphData, data)\n\n\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport function lessonChooseFetch (index) \n{\n    \n    return new Promise(async (resolve, reject) => \n    {\n        try \n        {\n            fetch('http://localhost:3001/protected', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n                },\n                body: \tqs.stringify({'lessonname': index})\n            })\n            .then((res) => res.json())\n            .then((data) => {\n                resolve(data)})\n        } \n        catch(error) \n        {\n            alert(\"4 doh laert\")\n            reject(error);\n        }\n    });\n}\n\nexport function* lessonChooseConstant(index) {\n    try \n    {   \n        const GrapData = yield call(lessonChooseFetch, index)\n    } \n    catch(error) \n    {\n        alert(\"error\")\n    }\n    finally \n    {\n        if (yield cancelled()) \n        {\n            alert(\"cancel modal data \")\n        }\n    }\n}\n\nexport function* lessonChooseState() \n{\n    while (true) \n    {\n        const {data} = yield take(rootConstants.LESSON_CHOOSE_REQUEST)\n        yield put({type: rootConstants.MODAL_GRAP_REQUEST })\n        const setData = yield fork(lessonChooseConstant, data)\n\n        \n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport function allLessonStateFetch (data,data1) \n{\n    return new Promise(async (resolve, reject) => \n    {\n        try \n        {   var count=0;\n            for(var i=0; i < Lessondatacopy.length; i++)\n            {\n                for(var j=0; j < data.id.length; j++)\n                {\n                    if(Lessondatacopy[i].id == data.id[j])\n                    {\n                        Lessondatacopy[i].color=\"#66b3ff\";\n                    }\n                    \n                    if(Lessondatacopy[i].parent != data.id[j] && Lessondatacopy[i].parent != null )\n                    {\n                        count++;\n                    }\n\n                }\n                if(count == data.id.length  && Lessondatacopy[i].parent != null)\n                {   \n                    Lessondatacopy[i].color=\"#ff4d4d\";\n                }\n                count = 0\n            }  \n\n            for (var i = 0; i < Lessondatacopy.length; i++)\n            {     \n            \n                if(LessonDatas[i].level == 1  ){\n                    Lessondata[0].data1.push(LessonDatas[i]);\n                }\n                if(LessonDatas[i].level == 2  ){\n                    Lessondata[1].data2.push(LessonDatas[i]);\n                }\n                if(LessonDatas[i].level == 3  ){\n                    Lessondata[2].data3.push(LessonDatas[i]);\n                }\n                if(LessonDatas[i].level == 4){\n                    Lessondata[3].data4.push(LessonDatas[i]);\n                }\n                if(LessonDatas[i].level == 5  ){\n                    Lessondata[4].data5.push(LessonDatas[i]);\n                }\n                \n                \n            }\n            resolve(Lessondata)\n                \n        } \n        catch(error) \n        {\n            alert(\"4 doh laert\")\n            reject(error);\n        }\n    });\n}\nexport function* allLessonStateDispatch(data,data1) {\n    try \n    {\n        const Lessondata = yield call(allLessonStateFetch, data, data1)\n        yield put({type: rootConstants.LESSON_SET_DATA ,data: Lessondata})\n    } \n    catch(error) \n    {\n        alert(\"LEsson ni error\")\n    }\n    finally \n    {\n        if (yield cancelled()) \n        {\n            alert(\"buh hichel data orulhad alda garla\")\n        }\n    }\n}\n\nexport function* allLessonState() \n{\n    while (true) \n    {\n        const {data, data1} = yield take(rootConstants.MODAL_LESSON_FALSE)\n        const setData = yield fork(allLessonStateDispatch, data,data1)\n    }\n}\n  "]},"metadata":{},"sourceType":"module"}