{"ast":null,"code":"import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport { rootConstants } from '../_constants';\nexport function graphDataFetch(lessonName) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      fetch('http://localhost:3001/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n        },\n        body: qs.stringify({\n          'lessonname': this.props.graphLessonName\n        })\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          lesdata: data\n        });\n        resolve(data);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nexport function* graphData(lessonName) {\n  try {\n    const lessonDatas = yield call(graphDataFetch, lessonName);\n    yield put({\n      type: rootConstants.MODAL_TRUE,\n      data: lessonDatas\n    });\n  } catch (error) {\n    alert(\"error\");\n  } finally {\n    if (yield cancelled()) {\n      alert(\"cancel modal data \");\n    }\n  }\n}\nexport function* graphState() {\n  while (true) {\n    const data = yield take(rootConstants.MODAL_REQUEST);\n    yield put({\n      type: rootConstants.MODAL_REQUEST,\n      data: data\n    });\n    const setData = yield fork(graphData, data);\n  }\n}\nexport function* logActions() {\n  while (true) {\n    const action = yield take('*');\n    console.log(action.type);\n  }\n}","map":{"version":3,"sources":["/home/tuguldur/MyDream/Diplom/notepad/src/_saga/sagas.js"],"names":["get","call","cancel","cancelled","fork","put","take","rootConstants","graphDataFetch","lessonName","Promise","resolve","reject","fetch","method","headers","body","qs","stringify","props","graphLessonName","then","res","json","data","setState","lesdata","error","graphData","lessonDatas","type","MODAL_TRUE","alert","graphState","MODAL_REQUEST","setData","logActions","action","console","log"],"mappings":"AAAA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6CC,IAA7C,QAAyD,oBAAzD;AACA,SAAQC,aAAR,QAA4B,eAA5B;AAEA,OAAO,SAASC,cAAT,CAAyBC,UAAzB,EAAqC;AACxC,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI;AACFC,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,QAAAA,MAAM,EAAE,MAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF0B;AAKnCC,QAAAA,IAAI,EAAGC,EAAE,CAACC,SAAH,CAAa;AAAC,wBAAc,KAAKC,KAAL,CAAWC;AAA1B,SAAb;AAL4B,OAAhC,CAAL,CAOCC,IAPD,CAOOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPf,EAQCF,IARD,CAQOG,IAAD,IAAU;AACd,aAAKC,QAAL,CAAc;AAACC,UAAAA,OAAO,EAACF;AAAT,SAAd;AACAb,QAAAA,OAAO,CAACa,IAAD,CAAP;AACD,OAXD;AAYD,KAbD,CAaE,OAAMG,KAAN,EAAa;AACbf,MAAAA,MAAM,CAACe,KAAD,CAAN;AACD;AACF,GAjBM,CAAP;AAkBD;AAED,OAAO,UAAUC,SAAV,CAAoBnB,UAApB,EAAgC;AACrC,MAAI;AACF,UAAMoB,WAAW,GAAG,MAAM5B,IAAI,CAACO,cAAD,EAAiBC,UAAjB,CAA9B;AACA,UAAMJ,GAAG,CAAC;AAACyB,MAAAA,IAAI,EAAEvB,aAAa,CAACwB,UAArB;AAAiCP,MAAAA,IAAI,EAAEK;AAAvC,KAAD,CAAT;AACD,GAHD,CAGE,OAAMF,KAAN,EAAa;AACbK,IAAAA,KAAK,CAAC,OAAD,CAAL;AACD,GALD,SAMQ;AACN,QAAI,MAAM7B,SAAS,EAAnB,EAAuB;AACnB6B,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACH;AACF;AACF;AAED,OAAO,UAAUC,UAAV,GAAuB;AAC5B,SAAO,IAAP,EAAa;AACT,UAAMT,IAAI,GAAG,MAAMlB,IAAI,CAACC,aAAa,CAAC2B,aAAf,CAAvB;AACA,UAAM7B,GAAG,CAAC;AAACyB,MAAAA,IAAI,EAAEvB,aAAa,CAAC2B,aAArB;AAAoCV,MAAAA,IAAI,EAAEA;AAA1C,KAAD,CAAT;AACA,UAAMW,OAAO,GAAG,MAAM/B,IAAI,CAACwB,SAAD,EAAYJ,IAAZ,CAA1B;AAGH;AACF;AAED,OAAO,UAAUY,UAAV,GAAuB;AAC5B,SAAO,IAAP,EAAa;AACX,UAAMC,MAAM,GAAG,MAAM/B,IAAI,CAAC,GAAD,CAAzB;AACAgC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACP,IAAnB;AACD;AACF","sourcesContent":["import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport {rootConstants} from '../_constants';\n\nexport function graphDataFetch (lessonName) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        fetch('http://localhost:3001/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n          },\n          body: \tqs.stringify({'lessonname': this.props.graphLessonName})\n        })\n        .then((res) => res.json())\n        .then((data) => { \n          this.setState({lesdata:data})\n          resolve(data)\n        })\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n  \n  export function* graphData(lessonName) {\n    try {\n      const lessonDatas = yield call(graphDataFetch, lessonName)\n      yield put({type: rootConstants.MODAL_TRUE, data: lessonDatas})\n    } catch(error) {\n      alert(\"error\")\n    }\n    finally {\n      if (yield cancelled()) {\n          alert(\"cancel modal data \")\n      }\n    }\n  }\n  \n  export function* graphState() {\n    while (true) {\n        const data = yield take(rootConstants.MODAL_REQUEST)\n        yield put({type: rootConstants.MODAL_REQUEST ,data: data})\n        const setData = yield fork(graphData, data)\n\n\n    }\n  }\n  \n  export function* logActions() {\n    while (true) {\n      const action = yield take('*')\n      console.log(action.type);\n    }\n  }"]},"metadata":{},"sourceType":"module"}