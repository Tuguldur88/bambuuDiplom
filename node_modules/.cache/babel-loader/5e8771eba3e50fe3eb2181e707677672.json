{"ast":null,"code":"import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport { rootConstants } from '../_constants';\nimport qs from 'qs';\nexport function graphDataFetch(lessonName) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      alert(\"2 doh laert\");\n      fetch('http://localhost:3001/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n        },\n        body: qs.stringify({\n          'lessonname': lessonName\n        })\n      }).then(res => res.json()).then(data => {\n        alert(\"3 doh laert\");\n        resolve(data);\n      });\n    } catch (error) {\n      alert(\"4 doh laert\");\n      reject(error);\n    }\n  });\n}\nexport function* graphData(lessonName) {\n  try {\n    alert(\"ehni laert\");\n    const lessonDatas = yield call(graphDataFetch, lessonName);\n    yield put({\n      type: rootConstants.MODAL_TRUE,\n      data: lessonDatas\n    });\n  } catch (error) {\n    alert(\"error\");\n  } finally {\n    if (yield cancelled()) {\n      alert(\"cancel modal data \");\n    }\n  }\n}\nexport function* graphState() {\n  while (true) {\n    const data = yield take(rootConstants.MODAL_REQUEST);\n    yield put({\n      type: rootConstants.MODAL_REQUEST,\n      data: data\n    });\n    const setData = yield fork(graphData, data);\n  }\n}\nexport function* logActions() {\n  while (true) {\n    const action = yield take('*');\n    console.log(action.type);\n  }\n}","map":{"version":3,"sources":["/home/tuguldur/MyDream/Diplom/notepad/src/_saga/sagas.js"],"names":["get","call","cancel","cancelled","fork","put","take","rootConstants","qs","graphDataFetch","lessonName","Promise","resolve","reject","alert","fetch","method","headers","body","stringify","then","res","json","data","error","graphData","lessonDatas","type","MODAL_TRUE","graphState","MODAL_REQUEST","setData","logActions","action","console","log"],"mappings":"AAAA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6CC,IAA7C,QAAyD,oBAAzD;AACA,SAAQC,aAAR,QAA4B,eAA5B;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,OAAO,SAASC,cAAT,CAAyBC,UAAzB,EAAqC;AACxC,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI;AACFC,MAAAA,KAAK,CAAC,aAAD,CAAL;AACAC,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,QAAAA,MAAM,EAAE,MAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF0B;AAKnCC,QAAAA,IAAI,EAAGV,EAAE,CAACW,SAAH,CAAa;AAAC,wBAAcT;AAAf,SAAb;AAL4B,OAAhC,CAAL,CAOCU,IAPD,CAOOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPf,EAQCF,IARD,CAQOG,IAAD,IAAU;AAAET,QAAAA,KAAK,CAAC,aAAD,CAAL;AAChBF,QAAAA,OAAO,CAACW,IAAD,CAAP;AACD,OAVD;AAWD,KAbD,CAaE,OAAMC,KAAN,EAAa;AACbV,MAAAA,KAAK,CAAC,aAAD,CAAL;AACAD,MAAAA,MAAM,CAACW,KAAD,CAAN;AACD;AACF,GAlBM,CAAP;AAmBD;AAED,OAAO,UAAUC,SAAV,CAAoBf,UAApB,EAAgC;AACrC,MAAI;AACHI,IAAAA,KAAK,CAAC,YAAD,CAAL;AACC,UAAMY,WAAW,GAAG,MAAMzB,IAAI,CAACQ,cAAD,EAAiBC,UAAjB,CAA9B;AACA,UAAML,GAAG,CAAC;AAACsB,MAAAA,IAAI,EAAEpB,aAAa,CAACqB,UAArB;AAAiCL,MAAAA,IAAI,EAAEG;AAAvC,KAAD,CAAT;AACD,GAJD,CAIE,OAAMF,KAAN,EAAa;AACbV,IAAAA,KAAK,CAAC,OAAD,CAAL;AACD,GAND,SAOQ;AACN,QAAI,MAAMX,SAAS,EAAnB,EAAuB;AACnBW,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACH;AACF;AACF;AAED,OAAO,UAAUe,UAAV,GAAuB;AAC5B,SAAO,IAAP,EAAa;AACT,UAAMN,IAAI,GAAG,MAAMjB,IAAI,CAACC,aAAa,CAACuB,aAAf,CAAvB;AACA,UAAMzB,GAAG,CAAC;AAACsB,MAAAA,IAAI,EAAEpB,aAAa,CAACuB,aAArB;AAAoCP,MAAAA,IAAI,EAAEA;AAA1C,KAAD,CAAT;AACA,UAAMQ,OAAO,GAAG,MAAM3B,IAAI,CAACqB,SAAD,EAAYF,IAAZ,CAA1B;AAGH;AACF;AAED,OAAO,UAAUS,UAAV,GAAuB;AAC5B,SAAO,IAAP,EAAa;AACX,UAAMC,MAAM,GAAG,MAAM3B,IAAI,CAAC,GAAD,CAAzB;AACA4B,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACN,IAAnB;AACD;AACF","sourcesContent":["import { get } from 'axios';\nimport { call, cancel, cancelled, fork, put, take } from 'redux-saga/effects';\nimport {rootConstants} from '../_constants';\nimport qs from 'qs';\n\nexport function graphDataFetch (lessonName) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        alert(\"2 doh laert\")\n        fetch('http://localhost:3001/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n          },\n          body: \tqs.stringify({'lessonname': lessonName})\n        })\n        .then((res) => res.json())\n        .then((data) => { alert(\"3 doh laert\")\n          resolve(data)\n        })\n      } catch(error) {\n        alert(\"4 doh laert\")\n        reject(error);\n      }\n    });\n  }\n  \n  export function* graphData(lessonName) {\n    try {\n     alert(\"ehni laert\")\n      const lessonDatas = yield call(graphDataFetch, lessonName)\n      yield put({type: rootConstants.MODAL_TRUE, data: lessonDatas})\n    } catch(error) {\n      alert(\"error\")\n    }\n    finally {\n      if (yield cancelled()) {\n          alert(\"cancel modal data \")\n      }\n    }\n  }\n  \n  export function* graphState() {\n    while (true) {\n        const data = yield take(rootConstants.MODAL_REQUEST)\n        yield put({type: rootConstants.MODAL_REQUEST ,data: data})\n        const setData = yield fork(graphData, data)\n\n\n    }\n  }\n  \n  export function* logActions() {\n    while (true) {\n      const action = yield take('*')\n      console.log(action.type);\n    }\n  }"]},"metadata":{},"sourceType":"module"}